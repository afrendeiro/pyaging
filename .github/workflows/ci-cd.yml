name: Test, build, publish, and release

#on:
#  push:
#    branches:
#      - main
#    paths:
#      - 'pyproject.toml'
#      - 'tutorials/**'
#      - 'pyaging/**'
#
#jobs:
#  build-and-deploy:
#    runs-on: ubuntu-latest
#    strategy:
#      matrix:
#        python-version: [3.9]
#
#    steps:
#    - uses: actions/checkout@v2
#
#    - name: Set up Python
#      uses: actions/setup-python@v2
#      with:
#        python-version: ${{ matrix.python-version }}
#
#    - name: Automated Version Bumping
#      id: autobump
#      uses: anothrNick/github-tag-action@1.67.0
#      env:
#        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
#        DEFAULT_BUMP: patch # or minor, major  
#
#    - name: Install dependencies
#      run: |
#        python -m pip install --upgrade pip
#        pip install poetry
#        poetry install
#
#    - name: Run Notebooks
#      run: |
#        poetry run pytest --nbmake tutorials/
#
#    - name: Build Package
#      run: |
#        poetry build
#
#    - name: Publish to Test PyPI
#      uses: pypa/gh-action-pypi-publish@v1.8.10
#      with:
#        password: ${{ secrets.TEST_PYPI_API_TOKEN }}
#        repository_url: https://test.pypi.org/legacy/
#
#    - name: Create GitHub Release
#      if: steps.autobump.outputs.new_tag != ''
#      uses: softprops/action-gh-release@v1
#      with:
#        files: dist/*
#        tag_name: ${{ steps.autobump.outputs.new_tag }}
#      env:
#        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        
        
        
        

on:
  push:
    branches:
      - main
    paths:
      - 'pyproject.toml'
      - 'tutorials/**'
      - 'pyaging/**'

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v2

    - name: Set up Python
      uses: actions/setup-python@v2
      with:
        python-version: '3.9'

    - name: Check for version change
      id: version-check
      run: |
        VERSION=$(grep "version =" pyproject.toml | cut -d'"' -f2)
        echo "Current version: $VERSION"
        git fetch --depth=1 origin +refs/tags/*:refs/tags/*
        LAST_TAG=$(git describe --tags `git rev-list --tags --max-count=1`)
        echo "Last version: $LAST_TAG"
        if [[ "$VERSION" != *"$LAST_TAG"* ]]; then
          echo "Version change detected, proceeding with the workflow..."
          echo "VERSION_CHANGED=true" >> $GITHUB_ENV
        else
          echo "No version change detected, stopping the workflow."
          echo "VERSION_CHANGED=false" >> $GITHUB_ENV
        fi
      shell: bash

    - if: env.VERSION_CHANGED == 'true'
      name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install poetry
        poetry install
    - if: env.VERSION_CHANGED == 'true'
      name: Run Notebooks
      run: |
        poetry run pytest --nbmake tutorials/

    - if: env.VERSION_CHANGED == 'true'
      name: Build Package
      run: |
        poetry build
    - if: env.VERSION_CHANGED == 'true'
      name: Publish to Test PyPI
      uses: pypa/gh-action-pypi-publish@v1.8.10
      with:
        password: ${{ secrets.TEST_PYPI_API_TOKEN }}
        repository_url: https://test.pypi.org/legacy/

    - if: env.VERSION_CHANGED == 'true'
      name: Create GitHub Release
      uses: softprops/action-gh-release@v1
      with:
        files: dist/*
        tag_name: ${{ env.VERSION }}
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
